1. Add package under Test folder, add Tests class. Main class is not needed
---------------------------------------------------------------------------------------------------------------------------------------------
2. Add @Test annotation, add code (e.g. assert ... == ... or Assert.accertEquals(..,..)
with Selenium:
@BeforeTest //driver initialization
    driver = new ChromeDriver();
    driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
    wait = new WebDriverWait(groupManager.driver,10);
@AfterTest //driver closed
    driver.close();
    driver = null;
_______________________________________________________________________________________________________________________________________________________
3. Refactoring:
—делать общий базовый класс дл€ тестов TestBase, перенести вспомогательные методы в него (включа€ инициализацию и завершение)
—делать класс ApplicationManager и перенести вспомогательные методы в него, это рекомендуетс€ делать при помощи рефакторинга в два шага, 
как описано в лекции "«амен€ем наследование на делегирование".
¬ыделить из ApplicationManager специализированные классы-помощники NavigationManager, GroupManager и ContactManager, перенести в них из 
ApplicationManager соответствующие вспомогательные методы.
—оздать дл€ этих вспомогательных классов общий базовый класс BaseManager, перенести в него низкоуровневые вспмогательные методы (заполнение 
отдельного пол€, нажатие на кнопку или ссылку).

1) Refactor->Extract->Method (Ctr+Alt+M) - move actions inside methods (e.g. goToGroup, fillGroupFields etc.)
2) Refactor->Extract->Parameter (Ctr+Alt+P) - move text and other dynamic parameters and test data (passwords, names, etc) into variables
3) Refactor->Extract->Parameter Object - move actions to fill huge forms into class (GroupData/ContactData etc) and pass object of new class as 
method parameter (fillGroupForm)
4) Use inheritance to create TestBase class with methods that can be used for other tests:
 class GroupCreationTests extends TestBase -> create TestBase class, then  Refactor -> Pull members up and move all generic methods to TestBase including
methods under @BeforeTest and @AfterTest. Don't forget to change private methods to public in TestBase!!
In GroupCreationTests class we leave only methods that are used to run test steps:
  @Test
  public void createNewGroup(){
    gotoGroups();
    startNewGroup();
    fillNewGroupFields(new GroupData("Test100", "Test110", "Test111"));
    submitNewGroup();
  }
All methods from parent TestBase class are inherited by all child classes, so we don't need to add @BeforeTest and @AfterTest to every new test class 
which extends TestBase. 
To see dependencies Diagram can be used.

5) Methods from TestBase class are divided into new classes by delegation: 
 - create init() and finish() methods for @BeforeTest and @AfterTest
 - TestBase extends ApplicationManager -> create ApplicationManager class -> Refactor -> Pull members up -> move all methods up, 
including init()/finish() and leave in TestBase class start() and stop() methods only
 - Refactor -> Replace Inheritence with Delegation -> field name - appManager:

public class TestBase {
  protected final AppManager appManager = new AppManager();
  @BeforeTest
  public void start() throws Exception {
    appManager.initial();
  }
  @AfterTest
  public void stop(){
    appManager.finish();
  }
}

1st Layer: class with test cases with simple methods + TestBase class with Start/End (test logic) -> move to new package "tests"
2nd Layer: class AppManager contains interaction with test system methods -> move to new package "appManager" (do not forget to rename protected methods 
to public!!)
3d - move GroupData class to new package "model"

6) AppManager is still huge - need to divide it:
- extend with pull members up group methods to GroupManager, contacts to ContactsManager plus NavigationManager 
- copy back to AppManager "public WebDriver driver;" in GroupManager set driver to "private WebDriver driver";
- in AppManager initial() before login set groupManager = new GroupManager(driver); -> click to Create Constructor in GroupManager with 
public GroupManager(WebDriver driver) {
    this.driver = driver;
  }
and delete groupManager. in groupManager.driver that turned red
- delete final in GroupManager groupManager declaration in AppManager class
- then Replace Inheritance with delegate with Generate getter check box!!!
- repeat all steps above for gotoGroups() -> move to NavigationManager
- repeat all steps above for login() -> move to SessionManager

7) for GroupManager select click/clear/sendkeys methods -> Refactor->Extract->Method (Ctr+Alt+M) -> type
 - select By.xpath("//input[@name='group_name']") -> Refactor->Extract->Parameter (Ctr+Alt+P) -> locator -> copy it and change for other 2 methods
 - select groupData.getGroupName() -> Refactor->Extract->Parameter (Ctr+Alt+P) -> inputText
 - select driver.findElement(By.xpath("//input[@name='submit']")).click() -> (Ctr+Alt+M) -> click
 - in new click() select By.xpath("//input[@name='submit']") -> (Ctr+Alt+P) -> locator

8) Create Base class for Manager classes:
- GroupManager extends ManagerBase, Refactor -> Pull members up -> move click() and type() methods up, 
- SessionManager extends ManagerBase, update constructor to super(driver); delete private WebDriver driver;
- replace with type() 3 methods to sendKeys and with click() click action
- do the same in NavigationManager

9) Create GroupModificationTests class:
 - extends TestBase
 - copy appManager.getNavigationManager().gotoGroups(); and appManager.getGroupManager().selectGroup(); from DeleteGroup
 - add new appManager.getGroupManager().initGroupMod(); -> create new method, use click() with locator from Recorder
 - add appManager.getGroupManager().fillNewGroupFields(new GroupData ()) with new data (e.g. (new GroupData("test9", "test99", "test999"))
 - add new appManager.getGroupManager().updateGroup(); -> create new method, use click() with locator from Recorder
________________________________________________________________________________________________________________________________________________

4. Run with different browsers:
 - in AppManager add new constructor with Browser.Type parameter :  public AppManager(String browser) {this.browser = browser;}
 - add private String browser;
 - in Test Base correct new AppManager(BrowserType.CHROME);
 - in AppManager add switch() for different browsers selector under public void initial() :
switch (browser) {
      case BrowserType.CHROME:
        driver = new ChromeDriver();
        break;
      case BrowserType.EDGE:
        driver = new EdgeDriver();
        break;
      case BrowserType.FIREFOX:
        driver = new FirefoxDriver();
        break;
    }
 - don't forget to download driver for Edge/Firfox and put it to dir that written in PATH (C:\WebDriver\bin) then restart IDE
___________________________________________________________________________________________________________________________________________________
 5. 
- Default input values handling: Add "null" for inputText (for group/contact creation or change) if we don't want to change text -> in BaseManager for 
  public void type(By locator, String inputText) add if(inputText != null) (else is empty here)
- Add check if current input value is the same: 
      String currentText = driver.findElement(locator).getAttribute("value");
      if(!currentText.equals(inputText))
___________________________________________________________________________________________________________________________________________________
6. Adding if/else to handle different elements on similar pages/forms (e.g. Group field in New Contact form is the only field different from Modify Contact)
- add new String group parameter in public ContactData() constructor, add getter for String group (inside ContactData class)
- in NewContact class add e.g. "Test100" for appManager.getContactManager().fillNewContactFields() and for ContactModification add null for String group 
- in ContactManager add new step to select group name in dropdown inside fillNewContactFields(ContactData contactData):

if (isElementPresent(By.name("new_group"))) {
      new Select((driver.findElement(By.name("new_group")))).selectByVisibleText(contactData.getGroup());
    }
  }

  private boolean isElementPresent(By locator) {
    try {
      driver.findElements(locator);
      return true;
    } catch (NoSuchElementException e) {
      return false;
    }
  } 

- move isElementPresent(By locator) to BaseManager using Reactor -> pullmemberup
- add new boolean creation parameter for fillNewContactFields(), then add in CreateContact true for fillNewContactFields() and false in ModifyConact
- in Contact manager change dropdown check to:
//select group dropdown
    if (creation) {
      new Select((driver.findElement(By.name("new_group")))).selectByVisibleText(contactData.getGroup());
    } else {
      Assert.assertFalse(isElementPresent(By.name("new_group"))); - !!! isElementPresent always returns true, see code for workaround
    }
______________________________________________________________________________________________________________________________________________________
7. Page download speed optimization (speed up test execution) in NavigationManager (if page download speed is low):
8. Add if/else for test preconditions (e.g. for Group/Contact delete ot modification to check if there is a Group/Contact to delete/modify)
9. Add elements counters and Assert.assertEquals(contactCountBefore, contactCountAfter) for all tests with groups and contacts
10. Add contact/group selection from a list by index:
  public void selectContact(int index) {
    driver.findElements(By.name("selected[]")).get(index).click();
  }
11. Collections formed - Added List<GroupData> getGroupList() / List<ContactData> getContactList() methods to get Lists of groups/contacts from WebElements
12. Collections comparing - Added   before.remove(before.size() -1);  Assert.assertEquals(before, after); for group/contact delete tests
    Generated toString() and equals Override in Group/Contact Data
13. Compare HashSets for Group/Contact modifications, add id to evoid dupplicates String id = element.findElement(By.name("selected[]")).getAttribute("value");
14. Update gr/cont creation tests with finding max id (change id from String to int)
15. Replace finding max id with Comparator and lambda
 contact.setContactId(after.stream().max((o1, o2) -> Integer.compare(o1.getContactId(), o2.getContactId())).get().getContactId());
16. Replace comparing HashSets with Lists sorting + compare Lists using Comparator
  //Comparator<? super ContactData> byId = (o1, o2) -> Integer.compare(o1.getContactId(), o2.getContactId());
    Comparator<? super ContactData> byId = Comparator.comparingInt(ContactData::getContactId);
    before.sort(byId);
    after.sort(byId);
    Assert.assertEquals(before, after);
For New group/contact tests we can remove calculation of max Id (after we added before/after.sort(byId)) and set in Group/ContactData constructor
this.groupId = Integer.MAX_VALUE; - thus newly added group/contact will be always moved to the end of the list after sorting
After sorting we don't need id - now we can remove them from equals/hash (generate then again)
17. Changed @BeforeTest to @BeforeSuite and protected static final AppManager appManager (added static) to run all tests with one browser start
18. Moved modify and delete tests preconditions to @BeforeMethod
